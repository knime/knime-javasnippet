<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="./java_editvar.png" type="Manipulator" xmlns="http://knime.org/node/v3.6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v3.6 http://knime.org/node/v3.6.xsd">
    <name>Java Edit Variable</name>
    <shortDescription>Edit or add flow variables using java code.</shortDescription>
    <fullDescription>
        <intro>
            <p>
              Edit or add flow variables using java code. The node is analogous to
              the Java Snippet node: In the central panel, added java code
              to add or modify variables. The variables available
              at the input are listed on the left.
            </p>
            <p>It is also possible to use external java libraries (that is, 
            libraries that are not part of java boot classpath). In order to 
            include such external jar or zip files, add their location in the 
            "Additional Libraries" tab using the control buttons.</p>
            <p>You can define reusable templates with the "Create templates..." 
            button. Templates are stored in the
            users workspace by default and can be accessed via the "Templates"
            tab.</p>            
        </intro>
        <option name="Flow Variable List">
          The list contains the flow variables that are currently available at
          the node input. Double clicking any of the entries will insert the
          respective identifier at the current cursor position (replacing the
          selection, if any).
        </option>
        <option name="Snippet text area">
          Enter your java code here. You can access input flow
          variables by defining them in the <b>Snippet fields for input</b>. A
          second way is to use the method <i>getFlowVariable(name, type)</i> 
          where <i>name</i> is the name of the flow variable, respectively. 
          You can use the following values for the <i>type</i> parameter. <br/>          
          <i>tString</i> : String <br/>
          <i>tInt</i>  : Integer <br/>
          <i>tDouble</i> : Double <br/>

          <br/>
          <b>Java Snippet Methods:</b><br/>
          <i>getFlowVariable(name, type)</i> : Get value of a flow variable by name<br/>
		  <i>getFlowVariables(type)</i> : Get all flow variables by type. A name to value map is returned.<br/>
		  <i>flowVariableExists(name)</i> : Check if a flow variable with given name exists<br/>
		  <i>isFlowVariableOfType(name, type)</i> : Check if a flow variable is of type<br/>          
          
          <p>You can hit <i>ctrl+space</i> to get an auto completion box with all
          available classes, methods and fields. When you select a class and hit
          <i>enter</i> a import statement will be generated if missing.</p>    
          <p>Note, that the snippet allows defining custom global variables and
          custom imports.</p>
          <p>Exceptions in the snippet are caught by the framework and will 
          cause the execution to fail. If you want to stop execution, please use an 
          exception of class <tt>Abort</tt>. It gives the user a nice
          error message.</p>          
        </option>
        <option name="Input">
          Define system input fields for the snippet text area. Every field 
          represents a flow variable of the input. 
        </option>
        <option name="Output">  
          Define flow variables that will be added to stack of flow variables
          at the output. Every row in the <b>Output</b> table
          defines a java field bound to a flow variable. Values assigned to this field
          in the snippet will set the value of the flow variable at the output.
        </option>
        <option name="Run script during node configuration or during node execution">
			In the former case, the snippet is run as soon as the node is configured (default). In the latter case,
			the snippet is run only once when the node is being executed, i.e. going from yellow to green state. This
			means that variables are populated later, often causing downstream nodes to be not configurable, as the
			created variables have a meaningless default value. However, sometimes this is necessary when, for instance,
			the snippet involves heavy computation, network access or another kind of I/O operation. If unsure, set this
			option to run the script during node configuration.
        </option>
        <link href="https://www.knime.com/knime-introductory-course/chapter7/section1/creation-and-usage-of-flow-variables">
            KNIME E-Learning Course: Creation and usage of Flow Variables in a KNIME workflow
        </link>
    </fullDescription>
    <ports>
        <inPort name="Input variables (optional)" index="0">
            Input variables (optional).</inPort>
        <outPort name="Output variables" index="0">
            Output variables.
        </outPort>
    </ports>
</knimeNode>
